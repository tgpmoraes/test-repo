{
	"name": "Create Spark Table with NYC Taxi Data",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool04",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "5a056938-9b13-4a72-abe3-495437c65d8b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/fbf033a1-3ebb-4140-bb7f-b406cf96c1b7/resourceGroups/data-engineering-synapse/providers/Microsoft.Synapse/workspaces/asaworkspacet20210731/bigDataPools/SparkPool04",
				"name": "SparkPool04",
				"type": "Spark",
				"endpoint": "https://asaworkspacet20210731.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool04",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load data\r\n",
					"Get a sample data of nyc yellow taxi from Azure Open Datasets"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from azureml.opendatasets import NycTlcYellow\r\n",
					"from datetime import datetime\r\n",
					"from dateutil import parser\r\n",
					"\r\n",
					"start_date = parser.parse('2018-05-01')\r\n",
					"end_date = parser.parse('2018-05-07')\r\n",
					"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\r\n",
					"nyc_tlc_df = nyc_tlc.to_pandas_dataframe()\r\n",
					"nyc_tlc_df.info()"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from IPython.display import display\r\n",
					"\r\n",
					"sampled_df = nyc_tlc_df.sample(n=10000, random_state=123)\r\n",
					"display(sampled_df.head(5))"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Prepare and featurize data\r\n",
					"- There are extra dimensions that are not going to be useful in the model. We just take the dimensions that we need and put them into the featurised dataframe. \r\n",
					"- There are also a bunch of outliers in the data so we need to filter them out."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"import numpy\r\n",
					"import pandas\r\n",
					"\r\n",
					"def get_pickup_time(df):\r\n",
					"    pickupHour = df['pickupHour'];\r\n",
					"    if ((pickupHour >= 7) & (pickupHour <= 10)):\r\n",
					"        return 'AMRush'\r\n",
					"    elif ((pickupHour >= 11) & (pickupHour <= 15)):\r\n",
					"        return 'Afternoon'\r\n",
					"    elif ((pickupHour >= 16) & (pickupHour <= 19)):\r\n",
					"        return 'PMRush'\r\n",
					"    else:\r\n",
					"        return 'Night'\r\n",
					"\r\n",
					"featurized_df = pandas.DataFrame()\r\n",
					"featurized_df['tipped'] = (sampled_df['tipAmount'] > 0).astype('int')\r\n",
					"featurized_df['fareAmount'] = sampled_df['fareAmount'].astype('float32')\r\n",
					"featurized_df['paymentType'] = sampled_df['paymentType'].astype('int')\r\n",
					"featurized_df['passengerCount'] = sampled_df['passengerCount'].astype('int')\r\n",
					"featurized_df['tripDistance'] = sampled_df['tripDistance'].astype('float32')\r\n",
					"featurized_df['pickupHour'] = sampled_df['tpepPickupDateTime'].dt.hour.astype('int')\r\n",
					"featurized_df['tripTimeSecs'] = ((sampled_df['tpepDropoffDateTime'] - sampled_df['tpepPickupDateTime']) / numpy.timedelta64(1, 's')).astype('int')\r\n",
					"\r\n",
					"featurized_df['pickupTimeBin'] = featurized_df.apply(get_pickup_time, axis=1)\r\n",
					"featurized_df = featurized_df.drop(columns='pickupHour')\r\n",
					"\r\n",
					"display(featurized_df.head(5))\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"filtered_df = featurized_df[(featurized_df.tipped >= 0) & (featurized_df.tipped <= 1)\\\r\n",
					"    & (featurized_df.fareAmount >= 1) & (featurized_df.fareAmount <= 250)\\\r\n",
					"    & (featurized_df.paymentType >= 1) & (featurized_df.paymentType <= 2)\\\r\n",
					"    & (featurized_df.passengerCount > 0) & (featurized_df.passengerCount < 8)\\\r\n",
					"    & (featurized_df.tripDistance >= 0) & (featurized_df.tripDistance <= 100)\\\r\n",
					"    & (featurized_df.tripTimeSecs >= 30) & (featurized_df.tripTimeSecs <= 7200)]\r\n",
					"\r\n",
					"filtered_df.info()"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Save the data to spark table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"spark_df = spark.createDataFrame(filtered_df)\r\n",
					"spark_df.write.mode(\"overwrite\").saveAsTable(\"default.NYC_Taxi\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = spark.sql(\"SELECT * FROM `default`.`nyc_taxi`\")\r\n",
					"df.show(10)"
				],
				"execution_count": 7
			}
		]
	}
}